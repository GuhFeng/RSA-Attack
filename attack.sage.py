

# This file was *autogenerated* from the file attack.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_16 = Integer(16); _sage_const_0 = Integer(0); _sage_const_30 = Integer(30)# File: exploit.sage

import time
import sys

# You will not known this
msg = b'Your PIN code is 4394'

def long_to_bytes(data):
    data = str(hex(long(data)))[_sage_const_2 :-_sage_const_1 ]
    return "".join([chr(int(data[i:i + _sage_const_2 ], _sage_const_16 )) for i in range(_sage_const_0 , len(data), _sage_const_2 )])
    
def bytes_to_long(data):
    return int(data.encode('hex'), _sage_const_16 )

def main():
    e,N = (3 , 101100845141156293469516586973179461987930689009763964117872470309684853512775295312081121501322683984914454311655512983781714534411655378725344931438891842226528067586198216797211681076517718505980665732445770547794541814618131322049740520275847849231052080791884055178607671253203354019327951368529475389269 )

    c = bytes_to_long(msg)**e % N
    m = bytes_to_long("Your PIN code is \x00\x00\x00\x00")
    P = PolynomialRing(Zmod(N), implementation='NTL', names=('x',)); (x,) = P._first_ngens(1)
    pol = (m + x)**e - c
    roots = pol.small_roots(epsilon=_sage_const_1 /_sage_const_30 )
    print("Potential solutions:")
    for root in roots:
       print(root, long_to_bytes(m+root))
	
main()

